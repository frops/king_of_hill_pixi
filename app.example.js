// Это код объявляет главный объект "Приложение"
// Здесь указываются настройки внутри фигурных скобок { }
// Здесь можно указать width - ширину приложения, height - высоту
let app = new PIXI.Application({
    width: 500, 
    height: 600
});

// app - это наше приложения, главный объект, который мы объявили ранее
// Далее идут конструкции, которые задают фон и положение.
app.renderer.backgroundColor = 0xa8831d;
app.renderer.view.style.position = 'absolute';

// Далее мы добавляем наше приложение на страницу сайта
// Без этого ничего отображаться не будет
document.body.appendChild(app.view);

// Инициализация закончилась
// Дальше будем рисовать интерфейсы

// Далее мы объявляем главный контейнер, в котором будем всё рисовать.
// Контейнеры могут быть внутри контейнеров до бесконечной вложенности.
// В теории можно добавлять сразу в app и не создавать контейнеры,
// но это неправильно с логической точки зрения, лучше всегда иметь главный контейнер.
let container = new PIXI.Container();

// Далее важная вещь, без которой контейнер не появится на экране
// Мы добавляем контейнер в наше приложение:
app.stage.addChild(container);

// Далее будем рисовать разные фигуры: текст, прямоуголник и т.д.

// Здесь мы объявляем объект "текст" конструкцией new PIXI.Text
// Первый параметр - это сам текст, который мы хотим отобразить
// Вторым параметром мы объявляем стиль написания текста через new PIXI.TextStyle
// Там настройки внутри фигурных скобок { }: шрифт, размер и цвет
let text = new PIXI.Text("BAKLA GAMES", new PIXI.TextStyle({
    fontFamily: "Arial",
    fontSize: "15pt",
    fill: "#871108"
}));

// Добавляем нащ объект "text" в наше приложение app. Без этого он не появится на экране.
container.addChild(text);

// Конструкция .anchor.set(0.5) установит центральную точку объекта ровно посередие
// По-умолчанию она находится в левом верхнем углу
text.anchor.set(0.5);

// При помощи функции position.set() мы можем поменять расположение объекта
text.position.set(250, 100);


// Здесь мы объявляем объект "rectangle" конструкцией new PIXI.Graphics()
// PIXI.Graphics - это графический объект, может быть потом: квадратом, кругом, линией и др.
let rectangle = new PIXI.Graphics();

// Далее мы указываем что это за фигура
// Пример ниже рисует прямоугольник:
// beginFill - указывает цвет
// drawRect - рисует квадрат, аргументы: 1 - координата X, 2 - координата Y, 3 - Ширина, 4 - Высота
// endFill - метод нарисовать квадрат (не знаю почему его нужно писать, просто пишите его)
rectangle
    .beginFill(0x312259)
    .drawRect(0, 0, 100, 60)
    .endFill();

// Добавляем нащ объект "rectangle" в наше приложение app. Без этого он не появится на экране.
container.addChild(rectangle);

// АНИМАЦИЯ
// Чтобы анимировать объекты, нужно воспользовать методом app.ticker.add()
// Здесь мы зачем-то указываем delta (пока не важно что это)
// Далее после знака => мы указываем какая функция отвечает за каждый шаг анимации
// Если это 30 FPS, то метод вызывается 30 раз в секунду
app.ticker.add(delta => animation(delta));

// Та самая функция для анимации, которая вызывается каждый кадр
// На delta пока не обращайте внимания
function animation(delta) {
    // Здесь мы получаем координаты объекта rectangle
    // Координатами объекта считается левый верхний угол
    let x = rectangle.position.x;
    let y = rectangle.position.y;

    // Далее идут условия и выяснение вектора движения объекта
    if (x <= 0) { 
        // Если объект по оси X меньше или равен нулю (выходит за левые рамки поля)
        koefX = 10;
    } else if (x >= (500 - rectangle.width)) {
        // Если объект по оси X больше или равен правой границе поля (выходит за правые рамки поля)
        koefX = -10;
    }

    if (y <= 0) {
        // Если объект по оси Y меньше или равен нулю (выходит за верхние рамки поля)
        koefY = 10;
    } else if (y == (600 - rectangle.height)) {
        // Если объект по оси Y больше или равен нижей границе поля (выходит за нижние рамки поля)
        koefY = -10;
    }

    // Далее мы будем двигать наш объект
    // Берем текушие координаты x и y, которые вычислили сверху
    // И прибавляем 10 или -10 (koefX и koefY), в зависимости от того, где сейчас объект
    rectangle.position.set(x + koefX, y + koefY);
}